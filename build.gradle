plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'jacoco'
	id 'signing'
	id 'maven-publish'
	id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
	id "io.freefair.lombok" version "5.3.3.3"
}

group = 'com.techsophy'
version = System.getenv('ORG_GRADLE_PROJECT_LIBRARY_VERSION')
description = 'awgment-commons'
repositories {
	mavenLocal()
	mavenCentral()
}
compileJava {
	sourceCompatibility = 11
	targetCompatibility = 11
}
java {
	withJavadocJar()
	withSourcesJar()
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'com.techsophy:id-generator:2.0.0'
	implementation 'com.techsophy:multitenancy-mongo:0.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:2.6.6'
	implementation 'org.springframework.boot:spring-boot-starter-security:2.6.6'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.6.6'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.2'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.5.0'
	implementation 'org.springframework:spring-aspects:5.3.18'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server:5.6.2'
	implementation 'io.github.resilience4j:resilience4j-spring-boot2:1.7.1'
	implementation 'org.json:json:20220320'
	implementation 'org.springframework.security:spring-security-oauth2-jose:5.6.2'
	implementation "io.mongock:mongodb-springdata-v3-driver:5.0.32"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.6.6'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '2.7.21'
	testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.27.2'
	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}
publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}

			pom {
				name = 'awgment-commons'
				description = 'awgment-commons is an open-source Java library which has common utilities used across awgment services'
				url = 'https://github.com/TechsophyOfficial/awgment-commons'
				inceptionYear = '2023'

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = 'techsophyofficial'
						name = 'Awgment owners'
						email = 'awgment@techsophy.com'
					}

					scm {
						connection = 'scm:git:git://github.com/TechsophyOfficial/awgment-commons.git'
						developerConnection = 'scm:git:ssh://github.com/TechsophyOfficial/awgment-commons.git'
						url = 'https://github.com/TechsophyOfficial/awgment-commons'
					}
				}
			}
		}
	}

}
	repositories {
		maven {
			def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
			def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			name = "OSSRH"
			// url = "https://s01.oss.sonatype.org/content/repositories/"
			credentials {
				username = System.getenv('OSSRH_USERNAME')
				password = System.getenv('OSSRH_PASSWORD')
			}

		}
	}
	nexusPublishing {
        repositories {
            sonatype {
                //only for users registered in Sonatype after 24 Feb 2021
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
				username = System.getenv('OSSRH_USERNAME')
				password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }

signing {
	sign publishing.publications.maven
}
javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

test {
	finalizedBy jacocoTestReport
	useJUnitPlatform()
}
jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		html.enabled true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.28
			}
		}

	}
}
check.dependsOn jacocoTestCoverageVerification

//Integration test configuration
sourceSets{
	integrationTest {
		java{
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integrationTest/java')

		}
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}


tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
	outputs.upToDateWhen { false }
}
check.dependsOn compileIntegrationTestJava
